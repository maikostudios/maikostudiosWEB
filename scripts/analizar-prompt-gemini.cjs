// Script para analizar c√≥mo se genera el prompt y qu√© datos usa Gemini
const fs = require("fs");

// Simulamos la obtenci√≥n de datos como lo hace el servicio real
async function simularObtencionDatos() {
  console.log("üîç AN√ÅLISIS DEL PROCESO DE GENERACI√ìN DE PROMPTS\n");
  console.log("=".repeat(60));

  // 1. PLANTILLA HTML (simulando Firebase)
  console.log("\nüìÑ 1. PLANTILLA HTML OBTENIDA DE FIREBASE:");
  console.log("   Colecci√≥n: plantillas");
  console.log('   Documento: donde activa == true && tipo == "cv_profesional"');
  console.log("   Campo: plantilla_cv_maiko\n");

  const plantillaHTML = `<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <style>
    body { font-family: Arial, sans-serif; margin: 0; padding: 0; color: #000; }
    header { background-color: #121212; color: white; text-align: center; padding: 20px 10px; }
    .sub-header { font-size: 14px; margin-top: 5px; }
    .divider { height: 5px; background-color: #00cccc; }
    section { padding: 20px; }
    h2 { color: #00cccc; margin-bottom: 10px; }
    .entry { margin-bottom: 15px; }
    .entry-title { font-weight: bold; }
    .footer { background-color: #f0f0f0; text-align: center; font-size: 12px; padding: 10px; }
  </style>
</head>
<body>
  <header>
    <h1>{{nombre_completo}}</h1>
    <div class="sub-header">{{cargo_principal}}</div>
    <div class="sub-header">{{email}} | {{telefono}} | <a href="{{linkedin}}" style="color:white;">LinkedIn</a></div>
    <div class="sub-header">{{ubicacion}}</div>
  </header>
  <div class="divider"></div>
  <section>
    <h2>Perfil Profesional</h2>
    <p>{{perfil_profesional}}</p>
  </section>
  <section>
    <h2>Experiencia Profesional</h2>
    {{experiencia_profesional}}
  </section>
  <section>
    <h2>Educaci√≥n</h2>
    {{educacion}}
  </section>
  <section>
    <h2>Habilidades T√©cnicas</h2>
    {{habilidades_tecnicas}}
  </section>
  <section>
    <h2>Habilidades Blandas</h2>
    <p>{{habilidades_blandas}}</p>
  </section>
  <section>
    <h2>Idiomas</h2>
    <p>{{idiomas}}</p>
  </section>
  <div class="footer">
    Contacto: <a href="mailto:{{email}}">{{email}}</a> | <a href="{{linkedin}}">LinkedIn</a>
  </div>
</body>
</html>`;

  console.log("   Variables encontradas en la plantilla:");
  const variables = plantillaHTML.match(/\{\{([^}]+)\}\}/g);
  variables.forEach((variable) => {
    console.log(`   - ${variable}`);
  });

  // 2. DATOS DEL PERFIL (simulando Firebase)
  console.log("\nüë§ 2. DATOS DEL PERFIL OBTENIDOS DE FIREBASE:");
  console.log("   Colecci√≥n: perfil_candidato");
  console.log("   Documento: donde activo == true");
  console.log("   ID: michael_saez\n");

  const datosJSON = {
    nombre_completo: "Michael Esteban S√°ez Contreras",
    cargo_principal: "Desarrollador Full Stack",
    email: "m.saezc@maikostudios.com",
    telefono: "+56983833148",
    ubicacion: "Temuco, IX Regi√≥n, Chile",
    linkedin: "https://www.linkedin.com/in/me-saezc/",
    web: "https://maikostudios.com/",
    perfil_profesional:
      "Desarrollador Full Stack con experiencia en Vue.js, Node.js y Firebase. Especializado en crear soluciones web completas y escalables.",
    experiencia_profesional: [
      {
        cargo: "Fundador y Desarrollador",
        empresa: "Maiko Studios",
        periodo: "2024 - Actualidad",
        descripcion:
          "Creaci√≥n de plataformas como DeUna Transferencias, automatizaciones con IA, digitalizaci√≥n para PYMEs y asesor√≠as tecnol√≥gicas.",
      },
      {
        cargo: "Facilitador/Docente Bootcamp Front End",
        empresa: "Desaf√≠o Latam",
        periodo: "Ago 2024 ‚Äì Dic 2024",
        descripcion:
          "Ense√±anza de HTML, CSS, BOOTSTRAP, JAVASCRIPT, y VUE JS en el Programa Talento Digital para Chile.",
      },
      {
        cargo: "Developer Full Stack & Soporte TI",
        empresa: "Tata Consultancy Services ‚Äì Metlife Chile",
        periodo: "Jul 2021 ‚Äì Dic 2023",
        descripcion:
          "Desarrollos para √°rea Direct Marketing. Soporte a aplicaciones y resoluci√≥n de tickets.",
      },
    ],
    habilidades_tecnicas: {
      lenguajes: ["JavaScript", "Python", "Java", "HTML", "CSS"],
      frontend: ["Vue.js", "React", "Angular", "Bootstrap", "Vuetify"],
      backend: ["Node.js", "Express.js", "Spring Boot", "FastAPI"],
      databases: ["PostgreSQL", "MongoDB", "Firebase", "MySQL"],
      cloud: ["Firebase", "AWS", "Google Cloud"],
      tools: ["Git", "Docker", "VS Code", "Figma"],
    },
    educacion: [
      {
        titulo: "Ingenier√≠a en Inform√°tica",
        institucion: "Universidad Cat√≥lica de Temuco",
        periodo: "2017-2021",
      },
      {
        titulo: "T√©cnico en Programaci√≥n",
        institucion: "Instituto AIEP",
        periodo: "2015-2017",
      },
    ],
    idiomas: [
      { idioma: "Espa√±ol", nivel: "Nativo" },
      { idioma: "Ingl√©s", nivel: "Intermedio" },
    ],
    habilidades_blandas:
      "Liderazgo de equipos, Comunicaci√≥n efectiva, Resoluci√≥n de problemas, Adaptabilidad, Trabajo en equipo, Mentor√≠a t√©cnica",
    activo: true,
    fecha_actualizacion: "2024-12-20",
  };

  console.log("   Estructura de datos:");
  console.log(
    `   - Informaci√≥n personal: ${
      Object.keys(datosJSON).filter((k) =>
        ["nombre_completo", "email", "telefono", "ubicacion"].includes(k)
      ).length
    } campos`
  );
  console.log(
    `   - Experiencia profesional: ${datosJSON.experiencia_profesional.length} trabajos`
  );
  console.log(
    `   - Habilidades t√©cnicas: ${
      Object.keys(datosJSON.habilidades_tecnicas).length
    } categor√≠as`
  );
  console.log(`   - Educaci√≥n: ${datosJSON.educacion.length} t√≠tulos`);
  console.log(`   - Idiomas: ${datosJSON.idiomas.length} idiomas`);

  // 3. PROMPT DEL SISTEMA
  console.log("\nü§ñ 3. PROMPT DEL SISTEMA (ROLE: SYSTEM):");
  console.log("   Funci√≥n: Definir el comportamiento de MaikoCV\n");

  const promptSystem = `Eres MaikoCV, un agente experto en generaci√≥n de CVs personalizados para Michael Esteban S√°ez Contreras.

Tu tarea es reemplazar √∫nicamente los datos din√°micos dentro de una plantilla HTML predefinida, sin alterar la estructura, dise√±o, clases ni estilos inline. La plantilla base ya tiene la disposici√≥n visual, colores, tipograf√≠a y layout deseados.

‚ö†Ô∏è IMPORTANTE:
- No inventes secciones ni reestructures el HTML.
- No agregues estilos nuevos, emojis adicionales ni cambios en las etiquetas existentes.
- No modifiques los nombres de clases ni IDs en el HTML.
- Solo reemplaza los contenidos internos entre etiquetas (ej: \`<p>\`, \`<li>\`, \`<h2>\`, etc.) con la nueva informaci√≥n del candidato.

FORMATO DE RESPUESTA:
Devuelve exclusivamente el HTML completo y corregido, sin explicaciones.`;

  console.log("   Contenido del prompt sistema:");
  console.log("   ‚úÖ Define rol: MaikoCV experto");
  console.log("   ‚úÖ Especifica tarea: reemplazar datos din√°micos");
  console.log("   ‚úÖ Restricciones: no alterar estructura HTML");
  console.log("   ‚úÖ Formato respuesta: solo HTML sin explicaciones");

  // 4. PROMPT DEL USUARIO
  console.log("\nüë®‚Äçüíª 4. PROMPT DEL USUARIO (ROLE: USER):");
  console.log("   Funci√≥n: Proporcionar plantilla, datos y personalizaci√≥n\n");

  const userPrompt =
    "CV para desarrollador Full Stack, destacar Vue.js y experiencia en startups";

  const promptUser = `Este es el contenido de la plantilla HTML maestra para el CV (estructura visual que debes respetar):

${plantillaHTML}

Estos son los nuevos datos del candidato en formato JSON que debes usar para reemplazar el contenido de la plantilla:

${JSON.stringify(datosJSON, null, 2)}

‚öôÔ∏è Tu tarea:
1. Sustituye los textos del CV con la nueva informaci√≥n.
2. Mant√©n todos los estilos CSS inline y estructura HTML exactamente igual.
3. Respeta el orden, formato, t√≠tulos, colores y layout.
4. Usa los datos del JSON de forma precisa. Si hay campos faltantes, deja el contenido actual tal cual.
5. Devuelve el HTML final reemplazado, sin comentarios ni explicaciones.

üìù PERSONALIZACI√ìN ADICIONAL SOLICITADA:
"${userPrompt}"

Aplica esta personalizaci√≥n manteniendo la estructura HTML base.

Cuando termines, el resultado debe ser un CV listo para renderizarse como HTML o exportarse como PDF.`;

  console.log("   Componentes del prompt usuario:");
  console.log(`   ‚úÖ Plantilla HTML: ${plantillaHTML.length} caracteres`);
  console.log(
    `   ‚úÖ Datos JSON: ${JSON.stringify(datosJSON).length} caracteres`
  );
  console.log(`   ‚úÖ Personalizaci√≥n: "${userPrompt}"`);
  console.log("   ‚úÖ Instrucciones espec√≠ficas: 5 pasos detallados");

  // 5. PROMPT COMBINADO (como lo env√≠a Gemini)
  console.log("\nüîó 5. PROMPT COMBINADO ENVIADO A GEMINI:");
  console.log('   Nota: Gemini no soporta rol "system", se combina todo\n');

  const promptCombinado = `${promptSystem}\n\n---\n\n${promptUser}`;

  console.log("   Estructura del prompt combinado:");
  console.log(`   üìè Longitud total: ${promptCombinado.length} caracteres`);
  console.log('   üìã Formato: [PROMPT_SISTEMA] + "---" + [PROMPT_USUARIO]');
  console.log(`   üéØ Variables a reemplazar: ${variables.length}`);
  console.log(
    `   üìä Datos disponibles: ${
      Object.keys(datosJSON).length
    } campos principales`
  );

  // 6. AN√ÅLISIS DE VARIABLES
  console.log("\nüîç 6. AN√ÅLISIS DE MAPEO VARIABLES ‚Üí DATOS:");
  console.log(
    "   Verificando qu√© datos est√°n disponibles para cada variable:\n"
  );

  const mapeoVariables = {
    "{{nombre_completo}}": datosJSON.nombre_completo,
    "{{cargo_principal}}": datosJSON.cargo_principal,
    "{{email}}": datosJSON.email,
    "{{telefono}}": datosJSON.telefono,
    "{{ubicacion}}": datosJSON.ubicacion,
    "{{linkedin}}": datosJSON.linkedin,
    "{{perfil_profesional}}": datosJSON.perfil_profesional,
    "{{experiencia_profesional}}": `${datosJSON.experiencia_profesional.length} trabajos`,
    "{{educacion}}": `${datosJSON.educacion.length} t√≠tulos`,
    "{{habilidades_tecnicas}}": `${
      Object.keys(datosJSON.habilidades_tecnicas).length
    } categor√≠as`,
    "{{habilidades_blandas}}": datosJSON.habilidades_blandas,
    "{{idiomas}}": `${datosJSON.idiomas.length} idiomas`,
  };

  Object.entries(mapeoVariables).forEach(([variable, valor]) => {
    const estado = valor ? "‚úÖ" : "‚ùå";
    console.log(`   ${estado} ${variable} ‚Üí ${valor || "NO DISPONIBLE"}`);
  });

  // 7. GUARDAR AN√ÅLISIS
  console.log("\nüíæ 7. GUARDANDO AN√ÅLISIS COMPLETO...");

  const analisisCompleto = {
    timestamp: new Date().toISOString(),
    plantilla: {
      fuente: "Firebase - colecci√≥n plantillas",
      longitud: plantillaHTML.length,
      variables: variables,
    },
    datos: {
      fuente: "Firebase - colecci√≥n perfil_candidato",
      documento: "michael_saez",
      campos: Object.keys(datosJSON),
      longitud_json: JSON.stringify(datosJSON).length,
    },
    prompts: {
      sistema: {
        longitud: promptSystem.length,
        proposito: "Definir comportamiento MaikoCV",
      },
      usuario: {
        longitud: promptUser.length,
        componentes: [
          "plantilla_html",
          "datos_json",
          "personalizacion",
          "instrucciones",
        ],
      },
      combinado: {
        longitud: promptCombinado.length,
        formato: "sistema + --- + usuario",
      },
    },
    mapeo_variables: mapeoVariables,
    personalizacion_ejemplo: userPrompt,
  };

  fs.writeFileSync(
    "analisis-prompt-gemini.json",
    JSON.stringify(analisisCompleto, null, 2)
  );
  console.log("   ‚úÖ Archivo guardado: analisis-prompt-gemini.json");

  // 8. RESUMEN FINAL
  console.log("\nüìã 8. RESUMEN DEL PROCESO:");
  console.log("=".repeat(60));
  console.log(
    "   1Ô∏è‚É£ Obtiene plantilla HTML desde Firebase (con variables {{}})"
  );
  console.log("   2Ô∏è‚É£ Obtiene datos del perfil desde Firebase (JSON completo)");
  console.log("   3Ô∏è‚É£ Crea prompt sistema (define comportamiento MaikoCV)");
  console.log(
    "   4Ô∏è‚É£ Crea prompt usuario (plantilla + datos + personalizaci√≥n)"
  );
  console.log("   5Ô∏è‚É£ Combina prompts (Gemini no soporta rol system)");
  console.log("   6Ô∏è‚É£ Env√≠a a Gemini 1.5 Flash");
  console.log("   7Ô∏è‚É£ Recibe HTML con variables reemplazadas");
  console.log("   8Ô∏è‚É£ Usuario descarga PDF del CV personalizado");

  console.log("\nüéØ DATOS CLAVE:");
  console.log(`   üìä Variables en plantilla: ${variables.length}`);
  console.log(`   üìã Campos de datos: ${Object.keys(datosJSON).length}`);
  console.log(`   üìè Prompt total: ${promptCombinado.length} caracteres`);
  console.log(`   üé® Personalizaci√≥n: "${userPrompt}"`);

  console.log("\n‚úÖ AN√ÅLISIS COMPLETADO");
}

// Ejecutar an√°lisis
simularObtencionDatos().catch(console.error);
